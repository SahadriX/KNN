# -*- coding: utf-8 -*-
"""KNN ALGORITHM ACCURATE AND PERFECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-Cg4kZCspsGKWtLrD-eJfs80_XkcAlq

1.First, you'll need to import the necessary libraries. For KNN, we use scikit-learn. We'll also use pandas for handling data and numpy for numerical operations.

2.You'll be needing a simple dataset manually. In a real scenario, you can load a dataset from a CSV file or another source.

3.KNN requires numerical input, so we need to convert the element type into numerical values.

4.Split the Data into Features and Labels:
Features (X) are the input variables, and the labels (Y) are the output variables.

5.Split the Data into Training and Testing Sets:
This step is crucial to evaluate the performance of our model.

6.Create and Train the KNN Model:
Initialize the KNN classifier and fit it to the training data.

7.Make Predictions:
Use the trained model to make predictions on the test data.

8.Evaluate the Model:
Calculate the accuracy of the model by comparing the predicted labels with the actual labels.

9.Visualize the Results (Optional):
For a better understanding, you can plot the data points and see how the classifier is working.
python
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

data = {
    'Weight': [150, 120, 180, 170, 200, 130, 160, 110, 140, 210],
    'Color': [0.8, 0.5, 0.7, 0.9, 0.85, 0.4, 0.75, 0.6, 0.55, 0.95],
    'Fruit': ['Apple', 'Banana', 'Orange', 'Apple', 'Apple', 'Banana', 'Orange', 'Banana', 'Banana', 'Apple']
}

# Convert to DataFrame
df = pd.DataFrame(data)
print(df)

from sklearn.preprocessing import LabelEncoder

# Encode the 'Fruit' column
label_encoder = LabelEncoder()
df['Fruit'] = label_encoder.fit_transform(df['Fruit'])
print(df)

X = df[['Weight', 'Color']]
Y = df['Fruit']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Initialize KNN classifier with K=3
knn = KNeighborsClassifier(n_neighbors=3)

# Fit the model
knn.fit(X_train, Y_train)

# Predict on the test set
Y_pred = knn.predict(X_test)
print(Y_pred)

# Calculate accuracy
accuracy = accuracy_score(Y_test, Y_pred)
print("Accuracy:", accuracy)

import matplotlib.pyplot as plt

# Scatter plot of the data points
plt.scatter(df['Weight'], df['Color'], c=df['Fruit'], cmap='viridis')
plt.xlabel('Weight')
plt.ylabel('Color')
plt.title('Fruit Classification')
plt.show()

